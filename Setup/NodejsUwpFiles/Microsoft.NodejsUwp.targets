<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <VisualStudioVersion Condition="'$(VisualStudioVersion)' == ''">15.0</VisualStudioVersion>
    <VSToolsPath Condition="'$(VSToolsPath)' == ''">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
    <NodechUWPSDKPath Condition="'$(NodechUWPSDKPath)' == ''">$(ProgramFiles)\NodejsUWP</NodechUWPSDKPath>
  </PropertyGroup>

  <!-- Reference C++ runtime for UWP wrapper -->
  <ItemGroup>
    <SDKReference Include="Microsoft.VCLibs, Version=14.0" />
  </ItemGroup>

  <!-- Import UWP related properties -->
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.WindowsSDK.props"/>

  <!-- Added to stop build process from copying .NET redist binaries to the bin folder -->
  <PropertyGroup>
    <TargetRuntime>none</TargetRuntime>
  </PropertyGroup>

  <!-- Normal install environment, use the current version -->
  <PropertyGroup>
    <ProjectHome Condition="'$(ProjectHome)' == ''">.</ProjectHome>
    <OutputPath>bin\$(Platform)\$(Configuration)\</OutputPath>
  </PropertyGroup>

  <!-- Include uwp.node to project when building to allow access to UWP namespaces -->
  <Target Name="CopyUWPAddon" BeforeTargets="CoreCompile">
    <Copy SourceFiles="$(NodechUWPSDKPath)\$(Platform)\uwp.node" DestinationFolder="$(ProjectHome)\node_modules" OverwriteReadOnlyFiles="true"/>
  </Target>
  
  <!-- Disable _CopyWebApplicationLegacy from running -->
  <PropertyGroup>
    <Disable_CopyWebApplication>true</Disable_CopyWebApplication>
  </PropertyGroup>
  
  <!-- For enabling C# references. If removed, there will be a 'project.json doesn't list win 10' build error -->
  <PropertyGroup>
    <PlatformTarget Condition="'$(PlatformTarget)' ==''">$(Platform)</PlatformTarget>
  </PropertyGroup>

  <!-- Node.js folders and files that will need to be custom packaged
       into the appx (using CustomOutputGroupForPackaging target) -->
  <ItemGroup>
    <NodeModulesContentDir Include="$(ProjectHome)\**\*.node"/>
  </ItemGroup>
  <ItemGroup>
    <PublicDir Include="$(ProjectHome)\public"/>
  </ItemGroup>
  <ItemGroup>
    <NodeTestsDir Include="$(ProjectHome)\test"/>
  </ItemGroup>
  <ItemGroup>
    <NodeHostFiles Include="$(NodechUWPSDKPath)\$(Platform)\*.dll"/>
  </ItemGroup>
  <ItemGroup>
    <NodeHostFiles Include="$(ProjectHome)\node_modules.zip"/>
  </ItemGroup>
  <ItemGroup>
    <NodeHostFiles Include="$(ProjectHome)\node_modules.hash"/>
  </ItemGroup>
  
  <Target Name="BeforeBuild">
    <ItemGroup>
      <Content Include="$(ProjectHome)\node_modules\**\*.*" />
    </ItemGroup>
  </Target>

  <UsingTask TaskName="ZipNodeModulesTask" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup>
      <ProjectHome Required="true"/>
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression.FileSystem"/>
      <Using Namespace="System.IO"/>
      <Using Namespace="System.IO.Compression"/>
      <Using Namespace="System.Security.Cryptography"/>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          string modulesPath = Path.Combine(ProjectHome, "node_modules");
          string zipPath = Path.Combine(ProjectHome, "node_modules.zip");
          string hashPath = Path.Combine(ProjectHome, "node_modules.hash");

          List<string> files = Directory.GetFiles(modulesPath, "*.*", SearchOption.AllDirectories).OrderBy(p => p).ToList();

          StringBuilder filesBlob = new StringBuilder();
          foreach(string f in files)
          {
            filesBlob.AppendFormat("{0} {1}\n", f, File.GetLastWriteTimeUtc(f));
          }

          MD5 md5 = MD5.Create();
          byte[] hashBytes = md5.ComputeHash(Encoding.UTF8.GetBytes(filesBlob.ToString()));

          if(!(File.Exists(hashPath) && File.ReadAllBytes(hashPath).SequenceEqual(hashBytes)))
          {
            File.WriteAllBytes(hashPath, hashBytes);

            if(File.Exists(zipPath))
            {
              File.Delete(zipPath);
            }
            ZipFile.CreateFromDirectory(modulesPath, zipPath, CompressionLevel.Fastest, false);
          }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="ZipNodeModulesFolder"  BeforeTargets="CoreCompile">
    <ZipNodeModulesTask ProjectHome="$(ProjectHome)"/>
  </Target>

  <PropertyGroup>
    <IncludeCustomOutputGroupForPackaging>true</IncludeCustomOutputGroupForPackaging>
  </PropertyGroup>

  <Target Name="CustomOutputGroupForPackaging" Returns="@(CustomOutputGroupForPackagingOutput)">
    <AssignTargetPath Files="@(NodeHostFiles->'%(FullPath)')" RootFolder="$(OutputPath)">
      <Output TaskParameter="AssignedFiles" ItemName="CustomOutputGroupForPackagingOutput" />
    </AssignTargetPath>
    <AssignTargetPath Files="@(Compile->'%(FullPath)')" RootFolder="$(OutputPath)">
      <Output TaskParameter="AssignedFiles" ItemName="CustomOutputGroupForPackagingOutput" />
    </AssignTargetPath>
    <AssignTargetPath Files="@(NodeModulesContentDir->'%(FullPath)')" RootFolder="$(ProjectHome)">
      <Output TaskParameter="AssignedFiles" ItemName="CustomOutputGroupForPackagingOutput" />
    </AssignTargetPath>
    <AssignTargetPath Files="@(NodeTestsDir->'%(FullPath)')" RootFolder="@(NodeTestsDir)" Condition="Exists(@(NodeTestsDir))">
      <Output TaskParameter="AssignedFiles" ItemName="CustomOutputGroupForPackagingOutput" />
    </AssignTargetPath>
    <AssignTargetPath Files="@(PublicDir->'%(FullPath)')" RootFolder="@(PublicDir)" Condition="Exists(@(PublicDir))">
      <Output TaskParameter="AssignedFiles" ItemName="CustomOutputGroupForPackagingOutput" />
    </AssignTargetPath>
  </Target>

  <PropertyGroup>
    <VSInstallDir Condition="'$(VSInstallDir)' == ''">$(registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\SxS\VS7@15.0)</VSInstallDir>
    <VSInstallDir Condition="'$(VSInstallDir)' == ''">$(registry:HKEY_CURRENT_USER\SOFTWARE\Microsoft\VisualStudio\SxS\VS7@15.0)</VSInstallDir>
    <VSInstallDir Condition="'$(VSInstallDir)' == ''">$(registry:HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\SxS\VS7@15.0)</VSInstallDir>
    <VSInstallDir Condition="'$(VSInstallDir)' == ''">$(registry:HKEY_CURRENT_USER\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\SxS\VS7@15.0)</VSInstallDir>
  </PropertyGroup>
 
  <Import Project="$(VSInstallDir)\MSBuild\Microsoft\VisualStudio\v$(VisualStudioVersion)\Node.js Tools\Microsoft.NodejsTools.targets"/>

  <PropertyGroup>
    <QualifiedProjectHome>$([System.IO.Path]::GetFullPath($([System.IO.Path]::Combine($(MSBuildProjectDirectory), $(ProjectHome)))))</QualifiedProjectHome>
    <QualifiedProjectHome Condition="!HasTrailingSlash('$(QualifiedProjectHome)')">$(QualifiedProjectHome)\</QualifiedProjectHome>
  </PropertyGroup>

  <PropertyGroup>
    <BuiltProjectOutputGroupDependsOn>
      BuiltProjectOutputGroupFast;
      $(BuiltProjectOutputGroupDependsOn)
    </BuiltProjectOutputGroupDependsOn>
  </PropertyGroup>

  <!-- Enables incremental build -->
  <Target Name="BuiltProjectOutputGroupFast"
          Returns="@(BuiltProjectOutputGroupFastOutput)"
          DependsOnTargets="$(BuiltProjectOutputGroupFastDependsOn)">
    <ItemGroup>
      <BuiltProjectOutputGroupFastOutput Remove="@(BuiltProjectOutputGroupFastOutput)" />
      <_BuiltProjectOutputGroupFastOutput Remove="@(_BuiltProjectOutputGroupFastOutput)" />
    </ItemGroup>

    <AssignTargetPath RootFolder="$(QualifiedProjectHome)" Files="$(AppxPackageRecipe)">
      <Output TaskParameter="AssignedFiles" ItemName="_BuiltProjectOutputGroupFastOutput" />
    </AssignTargetPath>

    <ItemGroup>
      <BuiltProjectOutputGroupFastOutput Include="@(_BuiltProjectOutputGroupFastOutput->'%(FullPath)')" />
    </ItemGroup>
  </Target>

  <Target Name="BuiltProjectOutputGroup"
          Returns="@(BuiltProjectOutputGroupOutput)"
          DependsOnTargets="$(BuiltProjectOutputGroupDependsOn)">
    <ItemGroup>
      <BuiltProjectOutputGroupOutput Remove="@(BuiltProjectOutputGroupOutput)" />
      <BuiltProjectOutputGroupOutput Include="@(BuiltProjectOutputGroupFastOutput)" />
    </ItemGroup>
  </Target>
</Project>
